/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.test.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.test.model.Story;
import com.test.model.StoryModel;
import com.test.model.StorySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Story service. Represents a row in the &quot;KYLE_Story&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.test.model.StoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StoryImpl}.
 * </p>
 *
 * @author gilaa004
 * @see StoryImpl
 * @see com.test.model.Story
 * @see com.test.model.StoryModel
 * @generated
 */
@JSON(strict = true)
public class StoryModelImpl extends BaseModelImpl<Story> implements StoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a story model instance should use the {@link com.test.model.Story} interface instead.
	 */
	public static final String TABLE_NAME = "KYLE_Story";
	public static final Object[][] TABLE_COLUMNS = {
			{ "story_Id", Types.BIGINT },
			{ "final_Story", Types.VARCHAR },
			{ "is_Good_Enough_For_Marketing", Types.BOOLEAN },
			{ "is_Good_Enough_For_Final_Story", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table KYLE_Story (story_Id LONG not null primary key,final_Story VARCHAR(75) null,is_Good_Enough_For_Marketing BOOLEAN,is_Good_Enough_For_Final_Story BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table KYLE_Story";
	public static final String ORDER_BY_JPQL = " ORDER BY story.story_Id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY KYLE_Story.story_Id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.test.model.Story"), true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.test.model.Story"), true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Story toModel(StorySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Story model = new StoryImpl();

		model.setStory_Id(soapModel.getStory_Id());
		model.setFinal_Story(soapModel.getFinal_Story());
		model.setIs_Good_Enough_For_Marketing(soapModel.getIs_Good_Enough_For_Marketing());
		model.setIs_Good_Enough_For_Final_Story(soapModel.getIs_Good_Enough_For_Final_Story());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Story> toModels(StorySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Story> models = new ArrayList<Story>(soapModels.length);

		for (StorySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.test.model.Story"));

	public StoryModelImpl() {
	}

	public long getPrimaryKey() {
		return _story_Id;
	}

	public void setPrimaryKey(long primaryKey) {
		setStory_Id(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_story_Id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Story.class;
	}

	public String getModelClassName() {
		return Story.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("story_Id", getStory_Id());
		attributes.put("final_Story", getFinal_Story());
		attributes.put("is_Good_Enough_For_Marketing",
			getIs_Good_Enough_For_Marketing());
		attributes.put("is_Good_Enough_For_Final_Story",
			getIs_Good_Enough_For_Final_Story());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long story_Id = (Long)attributes.get("story_Id");

		if (story_Id != null) {
			setStory_Id(story_Id);
		}

		String final_Story = (String)attributes.get("final_Story");

		if (final_Story != null) {
			setFinal_Story(final_Story);
		}

		Boolean is_Good_Enough_For_Marketing = (Boolean)attributes.get(
				"is_Good_Enough_For_Marketing");

		if (is_Good_Enough_For_Marketing != null) {
			setIs_Good_Enough_For_Marketing(is_Good_Enough_For_Marketing);
		}

		Boolean is_Good_Enough_For_Final_Story = (Boolean)attributes.get(
				"is_Good_Enough_For_Final_Story");

		if (is_Good_Enough_For_Final_Story != null) {
			setIs_Good_Enough_For_Final_Story(is_Good_Enough_For_Final_Story);
		}
	}

	@JSON
	public long getStory_Id() {
		return _story_Id;
	}

	public void setStory_Id(long story_Id) {
		_story_Id = story_Id;
	}

	@JSON
	public String getFinal_Story() {
		if (_final_Story == null) {
			return StringPool.BLANK;
		}
		else {
			return _final_Story;
		}
	}

	public void setFinal_Story(String final_Story) {
		_final_Story = final_Story;
	}

	@JSON
	public boolean getIs_Good_Enough_For_Marketing() {
		return _is_Good_Enough_For_Marketing;
	}

	public boolean isIs_Good_Enough_For_Marketing() {
		return _is_Good_Enough_For_Marketing;
	}

	public void setIs_Good_Enough_For_Marketing(
		boolean is_Good_Enough_For_Marketing) {
		_is_Good_Enough_For_Marketing = is_Good_Enough_For_Marketing;
	}

	@JSON
	public boolean getIs_Good_Enough_For_Final_Story() {
		return _is_Good_Enough_For_Final_Story;
	}

	public boolean isIs_Good_Enough_For_Final_Story() {
		return _is_Good_Enough_For_Final_Story;
	}

	public void setIs_Good_Enough_For_Final_Story(
		boolean is_Good_Enough_For_Final_Story) {
		_is_Good_Enough_For_Final_Story = is_Good_Enough_For_Final_Story;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Story.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Story toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Story)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		StoryImpl storyImpl = new StoryImpl();

		storyImpl.setStory_Id(getStory_Id());
		storyImpl.setFinal_Story(getFinal_Story());
		storyImpl.setIs_Good_Enough_For_Marketing(getIs_Good_Enough_For_Marketing());
		storyImpl.setIs_Good_Enough_For_Final_Story(getIs_Good_Enough_For_Final_Story());

		storyImpl.resetOriginalValues();

		return storyImpl;
	}

	public int compareTo(Story story) {
		int value = 0;

		if (getStory_Id() < story.getStory_Id()) {
			value = -1;
		}
		else if (getStory_Id() > story.getStory_Id()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Story story = null;

		try {
			story = (Story)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = story.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Story> toCacheModel() {
		StoryCacheModel storyCacheModel = new StoryCacheModel();

		storyCacheModel.story_Id = getStory_Id();

		storyCacheModel.final_Story = getFinal_Story();

		String final_Story = storyCacheModel.final_Story;

		if ((final_Story != null) && (final_Story.length() == 0)) {
			storyCacheModel.final_Story = null;
		}

		storyCacheModel.is_Good_Enough_For_Marketing = getIs_Good_Enough_For_Marketing();

		storyCacheModel.is_Good_Enough_For_Final_Story = getIs_Good_Enough_For_Final_Story();

		return storyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{story_Id=");
		sb.append(getStory_Id());
		sb.append(", final_Story=");
		sb.append(getFinal_Story());
		sb.append(", is_Good_Enough_For_Marketing=");
		sb.append(getIs_Good_Enough_For_Marketing());
		sb.append(", is_Good_Enough_For_Final_Story=");
		sb.append(getIs_Good_Enough_For_Final_Story());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.test.model.Story");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>story_Id</column-name><column-value><![CDATA[");
		sb.append(getStory_Id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>final_Story</column-name><column-value><![CDATA[");
		sb.append(getFinal_Story());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>is_Good_Enough_For_Marketing</column-name><column-value><![CDATA[");
		sb.append(getIs_Good_Enough_For_Marketing());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>is_Good_Enough_For_Final_Story</column-name><column-value><![CDATA[");
		sb.append(getIs_Good_Enough_For_Final_Story());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Story.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Story.class
		};
	private long _story_Id;
	private String _final_Story;
	private boolean _is_Good_Enough_For_Marketing;
	private boolean _is_Good_Enough_For_Final_Story;
	private Story _escapedModelProxy;
}