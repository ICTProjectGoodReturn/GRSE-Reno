/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.goodreturn.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import org.goodreturn.service.persistence.StoryPK;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the Story service. Represents a row in the &quot;GoodReturn_Story&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link org.goodreturn.model.impl.StoryModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link org.goodreturn.model.impl.StoryImpl}.
 * </p>
 *
 * @author gilaa004
 * @see Story
 * @see org.goodreturn.model.impl.StoryImpl
 * @see org.goodreturn.model.impl.StoryModelImpl
 * @generated
 */
public interface StoryModel extends BaseModel<Story> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a story model instance should use the {@link Story} interface instead.
	 */

	/**
	 * Returns the primary key of this story.
	 *
	 * @return the primary key of this story
	 */
	public StoryPK getPrimaryKey();

	/**
	 * Sets the primary key of this story.
	 *
	 * @param primaryKey the primary key of this story
	 */
	public void setPrimaryKey(StoryPK primaryKey);

	/**
	 * Returns the uuid of this story.
	 *
	 * @return the uuid of this story
	 */
	@AutoEscape
	public String getUuid();

	/**
	 * Sets the uuid of this story.
	 *
	 * @param uuid the uuid of this story
	 */
	public void setUuid(String uuid);

	/**
	 * Returns the story_ ID of this story.
	 *
	 * @return the story_ ID of this story
	 */
	public long getStory_Id();

	/**
	 * Sets the story_ ID of this story.
	 *
	 * @param story_Id the story_ ID of this story
	 */
	public void setStory_Id(long story_Id);

	/**
	 * Returns the loan_ account_ ID of this story.
	 *
	 * @return the loan_ account_ ID of this story
	 */
	public long getLoan_Account_Id();

	/**
	 * Sets the loan_ account_ ID of this story.
	 *
	 * @param loan_Account_Id the loan_ account_ ID of this story
	 */
	public void setLoan_Account_Id(long loan_Account_Id);

	/**
	 * Returns the final_ story of this story.
	 *
	 * @return the final_ story of this story
	 */
	@AutoEscape
	public String getFinal_Story();

	/**
	 * Sets the final_ story of this story.
	 *
	 * @param final_Story the final_ story of this story
	 */
	public void setFinal_Story(String final_Story);

	/**
	 * Returns the is_ good_ enough_ for_ marketing of this story.
	 *
	 * @return the is_ good_ enough_ for_ marketing of this story
	 */
	public boolean getIs_Good_Enough_For_Marketing();

	/**
	 * Returns <code>true</code> if this story is is_ good_ enough_ for_ marketing.
	 *
	 * @return <code>true</code> if this story is is_ good_ enough_ for_ marketing; <code>false</code> otherwise
	 */
	public boolean isIs_Good_Enough_For_Marketing();

	/**
	 * Sets whether this story is is_ good_ enough_ for_ marketing.
	 *
	 * @param is_Good_Enough_For_Marketing the is_ good_ enough_ for_ marketing of this story
	 */
	public void setIs_Good_Enough_For_Marketing(
		boolean is_Good_Enough_For_Marketing);

	/**
	 * Returns the is_ good_ enough_ for_ final_ story of this story.
	 *
	 * @return the is_ good_ enough_ for_ final_ story of this story
	 */
	public boolean getIs_Good_Enough_For_Final_Story();

	/**
	 * Returns <code>true</code> if this story is is_ good_ enough_ for_ final_ story.
	 *
	 * @return <code>true</code> if this story is is_ good_ enough_ for_ final_ story; <code>false</code> otherwise
	 */
	public boolean isIs_Good_Enough_For_Final_Story();

	/**
	 * Sets whether this story is is_ good_ enough_ for_ final_ story.
	 *
	 * @param is_Good_Enough_For_Final_Story the is_ good_ enough_ for_ final_ story of this story
	 */
	public void setIs_Good_Enough_For_Final_Story(
		boolean is_Good_Enough_For_Final_Story);

	/**
	 * Returns the status of this story.
	 *
	 * @return the status of this story
	 */
	public int getStatus();

	/**
	 * Sets the status of this story.
	 *
	 * @param status the status of this story
	 */
	public void setStatus(int status);

	/**
	 * Returns the status_ by_ user_ ID of this story.
	 *
	 * @return the status_ by_ user_ ID of this story
	 */
	public long getStatus_By_User_Id();

	/**
	 * Sets the status_ by_ user_ ID of this story.
	 *
	 * @param status_By_User_Id the status_ by_ user_ ID of this story
	 */
	public void setStatus_By_User_Id(long status_By_User_Id);

	/**
	 * Returns the status_ by_ user_ name of this story.
	 *
	 * @return the status_ by_ user_ name of this story
	 */
	@AutoEscape
	public String getStatus_By_User_Name();

	/**
	 * Sets the status_ by_ user_ name of this story.
	 *
	 * @param status_By_User_Name the status_ by_ user_ name of this story
	 */
	public void setStatus_By_User_Name(String status_By_User_Name);

	/**
	 * Returns the status_ date of this story.
	 *
	 * @return the status_ date of this story
	 */
	public Date getStatus_Date();

	/**
	 * Sets the status_ date of this story.
	 *
	 * @param status_Date the status_ date of this story
	 */
	public void setStatus_Date(Date status_Date);

	/**
	 * Returns the company_ ID of this story.
	 *
	 * @return the company_ ID of this story
	 */
	public long getCompany_Id();

	/**
	 * Sets the company_ ID of this story.
	 *
	 * @param company_Id the company_ ID of this story
	 */
	public void setCompany_Id(long company_Id);

	/**
	 * Returns the group_ ID of this story.
	 *
	 * @return the group_ ID of this story
	 */
	public long getGroup_Id();

	/**
	 * Sets the group_ ID of this story.
	 *
	 * @param group_Id the group_ ID of this story
	 */
	public void setGroup_Id(long group_Id);

	/**
	 * Returns the user_ ID of this story.
	 *
	 * @return the user_ ID of this story
	 */
	public long getUser_Id();

	/**
	 * Sets the user_ ID of this story.
	 *
	 * @param user_Id the user_ ID of this story
	 */
	public void setUser_Id(long user_Id);

	public boolean isNew();

	public void setNew(boolean n);

	public boolean isCachedModel();

	public void setCachedModel(boolean cachedModel);

	public boolean isEscapedModel();

	public Serializable getPrimaryKeyObj();

	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	public ExpandoBridge getExpandoBridge();

	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public Object clone();

	public int compareTo(Story story);

	public int hashCode();

	public CacheModel<Story> toCacheModel();

	public Story toEscapedModel();

	public String toString();

	public String toXmlString();
}