/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.GoodReturn.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.GoodReturn.model.TeamLenderLoan;
import org.GoodReturn.model.TeamLenderLoanModel;
import org.GoodReturn.model.TeamLenderLoanSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TeamLenderLoan service. Represents a row in the &quot;GoodReturn_TeamLenderLoan&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.GoodReturn.model.TeamLenderLoanModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TeamLenderLoanImpl}.
 * </p>
 *
 * @author gilaa004
 * @see TeamLenderLoanImpl
 * @see org.GoodReturn.model.TeamLenderLoan
 * @see org.GoodReturn.model.TeamLenderLoanModel
 * @generated
 */
@JSON(strict = true)
public class TeamLenderLoanModelImpl extends BaseModelImpl<TeamLenderLoan>
	implements TeamLenderLoanModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a team lender loan model instance should use the {@link org.GoodReturn.model.TeamLenderLoan} interface instead.
	 */
	public static final String TABLE_NAME = "GoodReturn_TeamLenderLoan";
	public static final Object[][] TABLE_COLUMNS = {
			{ "account_Id", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table GoodReturn_TeamLenderLoan (account_Id LONG not null primary key)";
	public static final String TABLE_SQL_DROP = "drop table GoodReturn_TeamLenderLoan";
	public static final String ORDER_BY_JPQL = " ORDER BY teamLenderLoan.account_Id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GoodReturn_TeamLenderLoan.account_Id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.GoodReturn.model.TeamLenderLoan"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.GoodReturn.model.TeamLenderLoan"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TeamLenderLoan toModel(TeamLenderLoanSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TeamLenderLoan model = new TeamLenderLoanImpl();

		model.setAccount_Id(soapModel.getAccount_Id());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TeamLenderLoan> toModels(TeamLenderLoanSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<TeamLenderLoan> models = new ArrayList<TeamLenderLoan>(soapModels.length);

		for (TeamLenderLoanSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.GoodReturn.model.TeamLenderLoan"));

	public TeamLenderLoanModelImpl() {
	}

	public long getPrimaryKey() {
		return _account_Id;
	}

	public void setPrimaryKey(long primaryKey) {
		setAccount_Id(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_account_Id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return TeamLenderLoan.class;
	}

	public String getModelClassName() {
		return TeamLenderLoan.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("account_Id", getAccount_Id());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long account_Id = (Long)attributes.get("account_Id");

		if (account_Id != null) {
			setAccount_Id(account_Id);
		}
	}

	@JSON
	public long getAccount_Id() {
		return _account_Id;
	}

	public void setAccount_Id(long account_Id) {
		_account_Id = account_Id;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TeamLenderLoan.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TeamLenderLoan toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (TeamLenderLoan)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		TeamLenderLoanImpl teamLenderLoanImpl = new TeamLenderLoanImpl();

		teamLenderLoanImpl.setAccount_Id(getAccount_Id());

		teamLenderLoanImpl.resetOriginalValues();

		return teamLenderLoanImpl;
	}

	public int compareTo(TeamLenderLoan teamLenderLoan) {
		int value = 0;

		if (getAccount_Id() < teamLenderLoan.getAccount_Id()) {
			value = -1;
		}
		else if (getAccount_Id() > teamLenderLoan.getAccount_Id()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		TeamLenderLoan teamLenderLoan = null;

		try {
			teamLenderLoan = (TeamLenderLoan)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = teamLenderLoan.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<TeamLenderLoan> toCacheModel() {
		TeamLenderLoanCacheModel teamLenderLoanCacheModel = new TeamLenderLoanCacheModel();

		teamLenderLoanCacheModel.account_Id = getAccount_Id();

		return teamLenderLoanCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(3);

		sb.append("{account_Id=");
		sb.append(getAccount_Id());

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(7);

		sb.append("<model><model-name>");
		sb.append("org.GoodReturn.model.TeamLenderLoan");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>account_Id</column-name><column-value><![CDATA[");
		sb.append(getAccount_Id());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TeamLenderLoan.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			TeamLenderLoan.class
		};
	private long _account_Id;
	private TeamLenderLoan _escapedModelProxy;
}