/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.GoodReturn.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.GoodReturn.model.Person;
import org.GoodReturn.model.PersonModel;
import org.GoodReturn.model.PersonSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Person service. Represents a row in the &quot;GoodReturn_Person&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.GoodReturn.model.PersonModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PersonImpl}.
 * </p>
 *
 * @author gilaa004
 * @see PersonImpl
 * @see org.GoodReturn.model.Person
 * @see org.GoodReturn.model.PersonModel
 * @generated
 */
@JSON(strict = true)
public class PersonModelImpl extends BaseModelImpl<Person>
	implements PersonModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a person model instance should use the {@link org.GoodReturn.model.Person} interface instead.
	 */
	public static final String TABLE_NAME = "GoodReturn_Person";
	public static final Object[][] TABLE_COLUMNS = {
			{ "abacus_Person_Id", Types.BIGINT },
			{ "first_Name", Types.VARCHAR },
			{ "last_Name", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "address", Types.VARCHAR },
			{ "address_Type", Types.VARCHAR },
			{ "country", Types.VARCHAR },
			{ "gender", Types.VARCHAR },
			{ "status", Types.VARCHAR },
			{ "photo_URL", Types.VARCHAR },
			{ "occupation", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table GoodReturn_Person (abacus_Person_Id LONG not null primary key,first_Name VARCHAR(75) null,last_Name VARCHAR(75) null,email VARCHAR(75) null,address VARCHAR(75) null,address_Type VARCHAR(75) null,country VARCHAR(75) null,gender VARCHAR(75) null,status VARCHAR(75) null,photo_URL VARCHAR(75) null,occupation VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table GoodReturn_Person";
	public static final String ORDER_BY_JPQL = " ORDER BY person.last_Name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY GoodReturn_Person.last_Name ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.GoodReturn.model.Person"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.GoodReturn.model.Person"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Person toModel(PersonSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Person model = new PersonImpl();

		model.setAbacus_Person_Id(soapModel.getAbacus_Person_Id());
		model.setFirst_Name(soapModel.getFirst_Name());
		model.setLast_Name(soapModel.getLast_Name());
		model.setEmail(soapModel.getEmail());
		model.setAddress(soapModel.getAddress());
		model.setAddress_Type(soapModel.getAddress_Type());
		model.setCountry(soapModel.getCountry());
		model.setGender(soapModel.getGender());
		model.setStatus(soapModel.getStatus());
		model.setPhoto_URL(soapModel.getPhoto_URL());
		model.setOccupation(soapModel.getOccupation());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Person> toModels(PersonSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Person> models = new ArrayList<Person>(soapModels.length);

		for (PersonSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.GoodReturn.model.Person"));

	public PersonModelImpl() {
	}

	public long getPrimaryKey() {
		return _abacus_Person_Id;
	}

	public void setPrimaryKey(long primaryKey) {
		setAbacus_Person_Id(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_abacus_Person_Id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Person.class;
	}

	public String getModelClassName() {
		return Person.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("abacus_Person_Id", getAbacus_Person_Id());
		attributes.put("first_Name", getFirst_Name());
		attributes.put("last_Name", getLast_Name());
		attributes.put("email", getEmail());
		attributes.put("address", getAddress());
		attributes.put("address_Type", getAddress_Type());
		attributes.put("country", getCountry());
		attributes.put("gender", getGender());
		attributes.put("status", getStatus());
		attributes.put("photo_URL", getPhoto_URL());
		attributes.put("occupation", getOccupation());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long abacus_Person_Id = (Long)attributes.get("abacus_Person_Id");

		if (abacus_Person_Id != null) {
			setAbacus_Person_Id(abacus_Person_Id);
		}

		String first_Name = (String)attributes.get("first_Name");

		if (first_Name != null) {
			setFirst_Name(first_Name);
		}

		String last_Name = (String)attributes.get("last_Name");

		if (last_Name != null) {
			setLast_Name(last_Name);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		String address = (String)attributes.get("address");

		if (address != null) {
			setAddress(address);
		}

		String address_Type = (String)attributes.get("address_Type");

		if (address_Type != null) {
			setAddress_Type(address_Type);
		}

		String country = (String)attributes.get("country");

		if (country != null) {
			setCountry(country);
		}

		String gender = (String)attributes.get("gender");

		if (gender != null) {
			setGender(gender);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String photo_URL = (String)attributes.get("photo_URL");

		if (photo_URL != null) {
			setPhoto_URL(photo_URL);
		}

		String occupation = (String)attributes.get("occupation");

		if (occupation != null) {
			setOccupation(occupation);
		}
	}

	@JSON
	public long getAbacus_Person_Id() {
		return _abacus_Person_Id;
	}

	public void setAbacus_Person_Id(long abacus_Person_Id) {
		_abacus_Person_Id = abacus_Person_Id;
	}

	@JSON
	public String getFirst_Name() {
		if (_first_Name == null) {
			return StringPool.BLANK;
		}
		else {
			return _first_Name;
		}
	}

	public void setFirst_Name(String first_Name) {
		_first_Name = first_Name;
	}

	@JSON
	public String getLast_Name() {
		if (_last_Name == null) {
			return StringPool.BLANK;
		}
		else {
			return _last_Name;
		}
	}

	public void setLast_Name(String last_Name) {
		_last_Name = last_Name;
	}

	@JSON
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	public void setEmail(String email) {
		_email = email;
	}

	@JSON
	public String getAddress() {
		if (_address == null) {
			return StringPool.BLANK;
		}
		else {
			return _address;
		}
	}

	public void setAddress(String address) {
		_address = address;
	}

	@JSON
	public String getAddress_Type() {
		if (_address_Type == null) {
			return StringPool.BLANK;
		}
		else {
			return _address_Type;
		}
	}

	public void setAddress_Type(String address_Type) {
		_address_Type = address_Type;
	}

	@JSON
	public String getCountry() {
		if (_country == null) {
			return StringPool.BLANK;
		}
		else {
			return _country;
		}
	}

	public void setCountry(String country) {
		_country = country;
	}

	@JSON
	public String getGender() {
		if (_gender == null) {
			return StringPool.BLANK;
		}
		else {
			return _gender;
		}
	}

	public void setGender(String gender) {
		_gender = gender;
	}

	@JSON
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	public void setStatus(String status) {
		_status = status;
	}

	@JSON
	public String getPhoto_URL() {
		if (_photo_URL == null) {
			return StringPool.BLANK;
		}
		else {
			return _photo_URL;
		}
	}

	public void setPhoto_URL(String photo_URL) {
		_photo_URL = photo_URL;
	}

	@JSON
	public String getOccupation() {
		if (_occupation == null) {
			return StringPool.BLANK;
		}
		else {
			return _occupation;
		}
	}

	public void setOccupation(String occupation) {
		_occupation = occupation;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Person.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Person toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Person)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		PersonImpl personImpl = new PersonImpl();

		personImpl.setAbacus_Person_Id(getAbacus_Person_Id());
		personImpl.setFirst_Name(getFirst_Name());
		personImpl.setLast_Name(getLast_Name());
		personImpl.setEmail(getEmail());
		personImpl.setAddress(getAddress());
		personImpl.setAddress_Type(getAddress_Type());
		personImpl.setCountry(getCountry());
		personImpl.setGender(getGender());
		personImpl.setStatus(getStatus());
		personImpl.setPhoto_URL(getPhoto_URL());
		personImpl.setOccupation(getOccupation());

		personImpl.resetOriginalValues();

		return personImpl;
	}

	public int compareTo(Person person) {
		int value = 0;

		value = getLast_Name().compareTo(person.getLast_Name());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Person person = null;

		try {
			person = (Person)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = person.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Person> toCacheModel() {
		PersonCacheModel personCacheModel = new PersonCacheModel();

		personCacheModel.abacus_Person_Id = getAbacus_Person_Id();

		personCacheModel.first_Name = getFirst_Name();

		String first_Name = personCacheModel.first_Name;

		if ((first_Name != null) && (first_Name.length() == 0)) {
			personCacheModel.first_Name = null;
		}

		personCacheModel.last_Name = getLast_Name();

		String last_Name = personCacheModel.last_Name;

		if ((last_Name != null) && (last_Name.length() == 0)) {
			personCacheModel.last_Name = null;
		}

		personCacheModel.email = getEmail();

		String email = personCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			personCacheModel.email = null;
		}

		personCacheModel.address = getAddress();

		String address = personCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			personCacheModel.address = null;
		}

		personCacheModel.address_Type = getAddress_Type();

		String address_Type = personCacheModel.address_Type;

		if ((address_Type != null) && (address_Type.length() == 0)) {
			personCacheModel.address_Type = null;
		}

		personCacheModel.country = getCountry();

		String country = personCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			personCacheModel.country = null;
		}

		personCacheModel.gender = getGender();

		String gender = personCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			personCacheModel.gender = null;
		}

		personCacheModel.status = getStatus();

		String status = personCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			personCacheModel.status = null;
		}

		personCacheModel.photo_URL = getPhoto_URL();

		String photo_URL = personCacheModel.photo_URL;

		if ((photo_URL != null) && (photo_URL.length() == 0)) {
			personCacheModel.photo_URL = null;
		}

		personCacheModel.occupation = getOccupation();

		String occupation = personCacheModel.occupation;

		if ((occupation != null) && (occupation.length() == 0)) {
			personCacheModel.occupation = null;
		}

		return personCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{abacus_Person_Id=");
		sb.append(getAbacus_Person_Id());
		sb.append(", first_Name=");
		sb.append(getFirst_Name());
		sb.append(", last_Name=");
		sb.append(getLast_Name());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append(", address_Type=");
		sb.append(getAddress_Type());
		sb.append(", country=");
		sb.append(getCountry());
		sb.append(", gender=");
		sb.append(getGender());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", photo_URL=");
		sb.append(getPhoto_URL());
		sb.append(", occupation=");
		sb.append(getOccupation());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("org.GoodReturn.model.Person");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>abacus_Person_Id</column-name><column-value><![CDATA[");
		sb.append(getAbacus_Person_Id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>first_Name</column-name><column-value><![CDATA[");
		sb.append(getFirst_Name());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>last_Name</column-name><column-value><![CDATA[");
		sb.append(getLast_Name());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address_Type</column-name><column-value><![CDATA[");
		sb.append(getAddress_Type());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>country</column-name><column-value><![CDATA[");
		sb.append(getCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gender</column-name><column-value><![CDATA[");
		sb.append(getGender());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>photo_URL</column-name><column-value><![CDATA[");
		sb.append(getPhoto_URL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>occupation</column-name><column-value><![CDATA[");
		sb.append(getOccupation());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Person.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Person.class
		};
	private long _abacus_Person_Id;
	private String _first_Name;
	private String _last_Name;
	private String _email;
	private String _address;
	private String _address_Type;
	private String _country;
	private String _gender;
	private String _status;
	private String _photo_URL;
	private String _occupation;
	private Person _escapedModelProxy;
}