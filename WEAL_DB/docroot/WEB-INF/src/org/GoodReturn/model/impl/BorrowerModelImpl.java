/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.GoodReturn.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.GoodReturn.model.Borrower;
import org.GoodReturn.model.BorrowerModel;
import org.GoodReturn.model.BorrowerSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Borrower service. Represents a row in the &quot;WEAL_Borrower&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.GoodReturn.model.BorrowerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BorrowerImpl}.
 * </p>
 *
 * @author gilaa004
 * @see BorrowerImpl
 * @see org.GoodReturn.model.Borrower
 * @see org.GoodReturn.model.BorrowerModel
 * @generated
 */
@JSON(strict = true)
public class BorrowerModelImpl extends BaseModelImpl<Borrower>
	implements BorrowerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a borrower model instance should use the {@link org.GoodReturn.model.Borrower} interface instead.
	 */
	public static final String TABLE_NAME = "WEAL_Borrower";
	public static final Object[][] TABLE_COLUMNS = {
			{ "abacus_Borrower_Id", Types.BIGINT },
			{ "write_Off_Date", Types.TIMESTAMP },
			{ "phone", Types.BIGINT },
			{ "wait_Time", Types.BIGINT },
			{ "country", Types.VARCHAR },
			{ "amount_Needed", Types.DOUBLE },
			{ "amount_Needed_AUD", Types.DOUBLE },
			{ "type_Of_Person", Types.VARCHAR },
			{ "village", Types.VARCHAR },
			{ "district", Types.VARCHAR },
			{ "pdf_Link", Types.VARCHAR },
			{ "currency_", Types.DOUBLE },
			{ "date_Applied", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table WEAL_Borrower (abacus_Borrower_Id LONG not null primary key,write_Off_Date DATE null,phone LONG,wait_Time LONG,country VARCHAR(75) null,amount_Needed DOUBLE,amount_Needed_AUD DOUBLE,type_Of_Person VARCHAR(75) null,village VARCHAR(75) null,district VARCHAR(75) null,pdf_Link VARCHAR(75) null,currency_ DOUBLE,date_Applied DATE null)";
	public static final String TABLE_SQL_DROP = "drop table WEAL_Borrower";
	public static final String ORDER_BY_JPQL = " ORDER BY borrower.amount_Needed ASC";
	public static final String ORDER_BY_SQL = " ORDER BY WEAL_Borrower.amount_Needed ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.GoodReturn.model.Borrower"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.GoodReturn.model.Borrower"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Borrower toModel(BorrowerSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Borrower model = new BorrowerImpl();

		model.setAbacus_Borrower_Id(soapModel.getAbacus_Borrower_Id());
		model.setWrite_Off_Date(soapModel.getWrite_Off_Date());
		model.setPhone(soapModel.getPhone());
		model.setWait_Time(soapModel.getWait_Time());
		model.setCountry(soapModel.getCountry());
		model.setAmount_Needed(soapModel.getAmount_Needed());
		model.setAmount_Needed_AUD(soapModel.getAmount_Needed_AUD());
		model.setType_Of_Person(soapModel.getType_Of_Person());
		model.setVillage(soapModel.getVillage());
		model.setDistrict(soapModel.getDistrict());
		model.setPdf_Link(soapModel.getPdf_Link());
		model.setCurrency(soapModel.getCurrency());
		model.setDate_Applied(soapModel.getDate_Applied());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Borrower> toModels(BorrowerSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Borrower> models = new ArrayList<Borrower>(soapModels.length);

		for (BorrowerSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.GoodReturn.model.Borrower"));

	public BorrowerModelImpl() {
	}

	public long getPrimaryKey() {
		return _abacus_Borrower_Id;
	}

	public void setPrimaryKey(long primaryKey) {
		setAbacus_Borrower_Id(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_abacus_Borrower_Id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Borrower.class;
	}

	public String getModelClassName() {
		return Borrower.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("abacus_Borrower_Id", getAbacus_Borrower_Id());
		attributes.put("write_Off_Date", getWrite_Off_Date());
		attributes.put("phone", getPhone());
		attributes.put("wait_Time", getWait_Time());
		attributes.put("country", getCountry());
		attributes.put("amount_Needed", getAmount_Needed());
		attributes.put("amount_Needed_AUD", getAmount_Needed_AUD());
		attributes.put("type_Of_Person", getType_Of_Person());
		attributes.put("village", getVillage());
		attributes.put("district", getDistrict());
		attributes.put("pdf_Link", getPdf_Link());
		attributes.put("currency", getCurrency());
		attributes.put("date_Applied", getDate_Applied());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long abacus_Borrower_Id = (Long)attributes.get("abacus_Borrower_Id");

		if (abacus_Borrower_Id != null) {
			setAbacus_Borrower_Id(abacus_Borrower_Id);
		}

		Date write_Off_Date = (Date)attributes.get("write_Off_Date");

		if (write_Off_Date != null) {
			setWrite_Off_Date(write_Off_Date);
		}

		Long phone = (Long)attributes.get("phone");

		if (phone != null) {
			setPhone(phone);
		}

		Long wait_Time = (Long)attributes.get("wait_Time");

		if (wait_Time != null) {
			setWait_Time(wait_Time);
		}

		String country = (String)attributes.get("country");

		if (country != null) {
			setCountry(country);
		}

		Double amount_Needed = (Double)attributes.get("amount_Needed");

		if (amount_Needed != null) {
			setAmount_Needed(amount_Needed);
		}

		Double amount_Needed_AUD = (Double)attributes.get("amount_Needed_AUD");

		if (amount_Needed_AUD != null) {
			setAmount_Needed_AUD(amount_Needed_AUD);
		}

		String type_Of_Person = (String)attributes.get("type_Of_Person");

		if (type_Of_Person != null) {
			setType_Of_Person(type_Of_Person);
		}

		String village = (String)attributes.get("village");

		if (village != null) {
			setVillage(village);
		}

		String district = (String)attributes.get("district");

		if (district != null) {
			setDistrict(district);
		}

		String pdf_Link = (String)attributes.get("pdf_Link");

		if (pdf_Link != null) {
			setPdf_Link(pdf_Link);
		}

		Double currency = (Double)attributes.get("currency");

		if (currency != null) {
			setCurrency(currency);
		}

		Date date_Applied = (Date)attributes.get("date_Applied");

		if (date_Applied != null) {
			setDate_Applied(date_Applied);
		}
	}

	@JSON
	public long getAbacus_Borrower_Id() {
		return _abacus_Borrower_Id;
	}

	public void setAbacus_Borrower_Id(long abacus_Borrower_Id) {
		_abacus_Borrower_Id = abacus_Borrower_Id;
	}

	@JSON
	public Date getWrite_Off_Date() {
		return _write_Off_Date;
	}

	public void setWrite_Off_Date(Date write_Off_Date) {
		_write_Off_Date = write_Off_Date;
	}

	@JSON
	public long getPhone() {
		return _phone;
	}

	public void setPhone(long phone) {
		_phone = phone;
	}

	@JSON
	public long getWait_Time() {
		return _wait_Time;
	}

	public void setWait_Time(long wait_Time) {
		_wait_Time = wait_Time;
	}

	@JSON
	public String getCountry() {
		if (_country == null) {
			return StringPool.BLANK;
		}
		else {
			return _country;
		}
	}

	public void setCountry(String country) {
		_country = country;
	}

	@JSON
	public double getAmount_Needed() {
		return _amount_Needed;
	}

	public void setAmount_Needed(double amount_Needed) {
		_amount_Needed = amount_Needed;
	}

	@JSON
	public double getAmount_Needed_AUD() {
		return _amount_Needed_AUD;
	}

	public void setAmount_Needed_AUD(double amount_Needed_AUD) {
		_amount_Needed_AUD = amount_Needed_AUD;
	}

	@JSON
	public String getType_Of_Person() {
		if (_type_Of_Person == null) {
			return StringPool.BLANK;
		}
		else {
			return _type_Of_Person;
		}
	}

	public void setType_Of_Person(String type_Of_Person) {
		_type_Of_Person = type_Of_Person;
	}

	@JSON
	public String getVillage() {
		if (_village == null) {
			return StringPool.BLANK;
		}
		else {
			return _village;
		}
	}

	public void setVillage(String village) {
		_village = village;
	}

	@JSON
	public String getDistrict() {
		if (_district == null) {
			return StringPool.BLANK;
		}
		else {
			return _district;
		}
	}

	public void setDistrict(String district) {
		_district = district;
	}

	@JSON
	public String getPdf_Link() {
		if (_pdf_Link == null) {
			return StringPool.BLANK;
		}
		else {
			return _pdf_Link;
		}
	}

	public void setPdf_Link(String pdf_Link) {
		_pdf_Link = pdf_Link;
	}

	@JSON
	public double getCurrency() {
		return _currency;
	}

	public void setCurrency(double currency) {
		_currency = currency;
	}

	@JSON
	public Date getDate_Applied() {
		return _date_Applied;
	}

	public void setDate_Applied(Date date_Applied) {
		_date_Applied = date_Applied;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Borrower.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Borrower toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Borrower)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		BorrowerImpl borrowerImpl = new BorrowerImpl();

		borrowerImpl.setAbacus_Borrower_Id(getAbacus_Borrower_Id());
		borrowerImpl.setWrite_Off_Date(getWrite_Off_Date());
		borrowerImpl.setPhone(getPhone());
		borrowerImpl.setWait_Time(getWait_Time());
		borrowerImpl.setCountry(getCountry());
		borrowerImpl.setAmount_Needed(getAmount_Needed());
		borrowerImpl.setAmount_Needed_AUD(getAmount_Needed_AUD());
		borrowerImpl.setType_Of_Person(getType_Of_Person());
		borrowerImpl.setVillage(getVillage());
		borrowerImpl.setDistrict(getDistrict());
		borrowerImpl.setPdf_Link(getPdf_Link());
		borrowerImpl.setCurrency(getCurrency());
		borrowerImpl.setDate_Applied(getDate_Applied());

		borrowerImpl.resetOriginalValues();

		return borrowerImpl;
	}

	public int compareTo(Borrower borrower) {
		int value = 0;

		if (getAmount_Needed() < borrower.getAmount_Needed()) {
			value = -1;
		}
		else if (getAmount_Needed() > borrower.getAmount_Needed()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Borrower borrower = null;

		try {
			borrower = (Borrower)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = borrower.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Borrower> toCacheModel() {
		BorrowerCacheModel borrowerCacheModel = new BorrowerCacheModel();

		borrowerCacheModel.abacus_Borrower_Id = getAbacus_Borrower_Id();

		Date write_Off_Date = getWrite_Off_Date();

		if (write_Off_Date != null) {
			borrowerCacheModel.write_Off_Date = write_Off_Date.getTime();
		}
		else {
			borrowerCacheModel.write_Off_Date = Long.MIN_VALUE;
		}

		borrowerCacheModel.phone = getPhone();

		borrowerCacheModel.wait_Time = getWait_Time();

		borrowerCacheModel.country = getCountry();

		String country = borrowerCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			borrowerCacheModel.country = null;
		}

		borrowerCacheModel.amount_Needed = getAmount_Needed();

		borrowerCacheModel.amount_Needed_AUD = getAmount_Needed_AUD();

		borrowerCacheModel.type_Of_Person = getType_Of_Person();

		String type_Of_Person = borrowerCacheModel.type_Of_Person;

		if ((type_Of_Person != null) && (type_Of_Person.length() == 0)) {
			borrowerCacheModel.type_Of_Person = null;
		}

		borrowerCacheModel.village = getVillage();

		String village = borrowerCacheModel.village;

		if ((village != null) && (village.length() == 0)) {
			borrowerCacheModel.village = null;
		}

		borrowerCacheModel.district = getDistrict();

		String district = borrowerCacheModel.district;

		if ((district != null) && (district.length() == 0)) {
			borrowerCacheModel.district = null;
		}

		borrowerCacheModel.pdf_Link = getPdf_Link();

		String pdf_Link = borrowerCacheModel.pdf_Link;

		if ((pdf_Link != null) && (pdf_Link.length() == 0)) {
			borrowerCacheModel.pdf_Link = null;
		}

		borrowerCacheModel.currency = getCurrency();

		Date date_Applied = getDate_Applied();

		if (date_Applied != null) {
			borrowerCacheModel.date_Applied = date_Applied.getTime();
		}
		else {
			borrowerCacheModel.date_Applied = Long.MIN_VALUE;
		}

		return borrowerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{abacus_Borrower_Id=");
		sb.append(getAbacus_Borrower_Id());
		sb.append(", write_Off_Date=");
		sb.append(getWrite_Off_Date());
		sb.append(", phone=");
		sb.append(getPhone());
		sb.append(", wait_Time=");
		sb.append(getWait_Time());
		sb.append(", country=");
		sb.append(getCountry());
		sb.append(", amount_Needed=");
		sb.append(getAmount_Needed());
		sb.append(", amount_Needed_AUD=");
		sb.append(getAmount_Needed_AUD());
		sb.append(", type_Of_Person=");
		sb.append(getType_Of_Person());
		sb.append(", village=");
		sb.append(getVillage());
		sb.append(", district=");
		sb.append(getDistrict());
		sb.append(", pdf_Link=");
		sb.append(getPdf_Link());
		sb.append(", currency=");
		sb.append(getCurrency());
		sb.append(", date_Applied=");
		sb.append(getDate_Applied());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("org.GoodReturn.model.Borrower");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>abacus_Borrower_Id</column-name><column-value><![CDATA[");
		sb.append(getAbacus_Borrower_Id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>write_Off_Date</column-name><column-value><![CDATA[");
		sb.append(getWrite_Off_Date());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phone</column-name><column-value><![CDATA[");
		sb.append(getPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>wait_Time</column-name><column-value><![CDATA[");
		sb.append(getWait_Time());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>country</column-name><column-value><![CDATA[");
		sb.append(getCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amount_Needed</column-name><column-value><![CDATA[");
		sb.append(getAmount_Needed());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amount_Needed_AUD</column-name><column-value><![CDATA[");
		sb.append(getAmount_Needed_AUD());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type_Of_Person</column-name><column-value><![CDATA[");
		sb.append(getType_Of_Person());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>village</column-name><column-value><![CDATA[");
		sb.append(getVillage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>district</column-name><column-value><![CDATA[");
		sb.append(getDistrict());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pdf_Link</column-name><column-value><![CDATA[");
		sb.append(getPdf_Link());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currency</column-name><column-value><![CDATA[");
		sb.append(getCurrency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>date_Applied</column-name><column-value><![CDATA[");
		sb.append(getDate_Applied());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Borrower.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Borrower.class
		};
	private long _abacus_Borrower_Id;
	private Date _write_Off_Date;
	private long _phone;
	private long _wait_Time;
	private String _country;
	private double _amount_Needed;
	private double _amount_Needed_AUD;
	private String _type_Of_Person;
	private String _village;
	private String _district;
	private String _pdf_Link;
	private double _currency;
	private Date _date_Applied;
	private Borrower _escapedModelProxy;
}