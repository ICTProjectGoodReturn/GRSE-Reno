/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.GoodReturn.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.GoodReturn.model.Loan;
import org.GoodReturn.model.LoanModel;
import org.GoodReturn.model.LoanSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Loan service. Represents a row in the &quot;WEAL_Loan&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.GoodReturn.model.LoanModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LoanImpl}.
 * </p>
 *
 * @author gilaa004
 * @see LoanImpl
 * @see org.GoodReturn.model.Loan
 * @see org.GoodReturn.model.LoanModel
 * @generated
 */
@JSON(strict = true)
public class LoanModelImpl extends BaseModelImpl<Loan> implements LoanModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a loan model instance should use the {@link org.GoodReturn.model.Loan} interface instead.
	 */
	public static final String TABLE_NAME = "WEAL_Loan";
	public static final Object[][] TABLE_COLUMNS = {
			{ "loan_Id", Types.BIGINT },
			{ "is_Partially_Funded", Types.BOOLEAN },
			{ "amount_Requested", Types.DOUBLE },
			{ "amount_Fulfilled", Types.DOUBLE },
			{ "expiry_Date", Types.TIMESTAMP },
			{ "date_Requisitioned", Types.TIMESTAMP },
			{ "date_Of_Fulfillment", Types.TIMESTAMP },
			{ "start_Date", Types.TIMESTAMP },
			{ "end_Date", Types.TIMESTAMP },
			{ "company_Id", Types.BIGINT },
			{ "group_Id", Types.BIGINT },
			{ "amount_Monthly", Types.INTEGER },
			{ "account_Information", Types.VARCHAR },
			{ "day_Of_Withdrawal", Types.INTEGER },
			{ "final_Payment_Date", Types.TIMESTAMP },
			{ "loan_Reason", Types.VARCHAR },
			{ "loan_Type", Types.VARCHAR },
			{ "loan_Time", Types.VARCHAR },
			{ "funding_Preferences", Types.VARCHAR },
			{ "maturity", Types.VARCHAR },
			{ "repayments", Types.DOUBLE },
			{ "status", Types.VARCHAR },
			{ "payment_Type", Types.VARCHAR },
			{ "payment_Receipt", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table WEAL_Loan (loan_Id LONG not null primary key,is_Partially_Funded BOOLEAN,amount_Requested DOUBLE,amount_Fulfilled DOUBLE,expiry_Date DATE null,date_Requisitioned DATE null,date_Of_Fulfillment DATE null,start_Date DATE null,end_Date DATE null,company_Id LONG,group_Id LONG,amount_Monthly INTEGER,account_Information VARCHAR(75) null,day_Of_Withdrawal INTEGER,final_Payment_Date DATE null,loan_Reason VARCHAR(75) null,loan_Type VARCHAR(75) null,loan_Time VARCHAR(75) null,funding_Preferences VARCHAR(75) null,maturity VARCHAR(75) null,repayments DOUBLE,status VARCHAR(75) null,payment_Type VARCHAR(75) null,payment_Receipt VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table WEAL_Loan";
	public static final String ORDER_BY_JPQL = " ORDER BY loan.loan_Id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY WEAL_Loan.loan_Id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.GoodReturn.model.Loan"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.GoodReturn.model.Loan"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Loan toModel(LoanSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Loan model = new LoanImpl();

		model.setLoan_Id(soapModel.getLoan_Id());
		model.setIs_Partially_Funded(soapModel.getIs_Partially_Funded());
		model.setAmount_Requested(soapModel.getAmount_Requested());
		model.setAmount_Fulfilled(soapModel.getAmount_Fulfilled());
		model.setExpiry_Date(soapModel.getExpiry_Date());
		model.setDate_Requisitioned(soapModel.getDate_Requisitioned());
		model.setDate_Of_Fulfillment(soapModel.getDate_Of_Fulfillment());
		model.setStart_Date(soapModel.getStart_Date());
		model.setEnd_Date(soapModel.getEnd_Date());
		model.setCompany_Id(soapModel.getCompany_Id());
		model.setGroup_Id(soapModel.getGroup_Id());
		model.setAmount_Monthly(soapModel.getAmount_Monthly());
		model.setAccount_Information(soapModel.getAccount_Information());
		model.setDay_Of_Withdrawal(soapModel.getDay_Of_Withdrawal());
		model.setFinal_Payment_Date(soapModel.getFinal_Payment_Date());
		model.setLoan_Reason(soapModel.getLoan_Reason());
		model.setLoan_Type(soapModel.getLoan_Type());
		model.setLoan_Time(soapModel.getLoan_Time());
		model.setFunding_Preferences(soapModel.getFunding_Preferences());
		model.setMaturity(soapModel.getMaturity());
		model.setRepayments(soapModel.getRepayments());
		model.setStatus(soapModel.getStatus());
		model.setPayment_Type(soapModel.getPayment_Type());
		model.setPayment_Receipt(soapModel.getPayment_Receipt());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Loan> toModels(LoanSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Loan> models = new ArrayList<Loan>(soapModels.length);

		for (LoanSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.GoodReturn.model.Loan"));

	public LoanModelImpl() {
	}

	public long getPrimaryKey() {
		return _loan_Id;
	}

	public void setPrimaryKey(long primaryKey) {
		setLoan_Id(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_loan_Id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Loan.class;
	}

	public String getModelClassName() {
		return Loan.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("loan_Id", getLoan_Id());
		attributes.put("is_Partially_Funded", getIs_Partially_Funded());
		attributes.put("amount_Requested", getAmount_Requested());
		attributes.put("amount_Fulfilled", getAmount_Fulfilled());
		attributes.put("expiry_Date", getExpiry_Date());
		attributes.put("date_Requisitioned", getDate_Requisitioned());
		attributes.put("date_Of_Fulfillment", getDate_Of_Fulfillment());
		attributes.put("start_Date", getStart_Date());
		attributes.put("end_Date", getEnd_Date());
		attributes.put("company_Id", getCompany_Id());
		attributes.put("group_Id", getGroup_Id());
		attributes.put("amount_Monthly", getAmount_Monthly());
		attributes.put("account_Information", getAccount_Information());
		attributes.put("day_Of_Withdrawal", getDay_Of_Withdrawal());
		attributes.put("final_Payment_Date", getFinal_Payment_Date());
		attributes.put("loan_Reason", getLoan_Reason());
		attributes.put("loan_Type", getLoan_Type());
		attributes.put("loan_Time", getLoan_Time());
		attributes.put("funding_Preferences", getFunding_Preferences());
		attributes.put("maturity", getMaturity());
		attributes.put("repayments", getRepayments());
		attributes.put("status", getStatus());
		attributes.put("payment_Type", getPayment_Type());
		attributes.put("payment_Receipt", getPayment_Receipt());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long loan_Id = (Long)attributes.get("loan_Id");

		if (loan_Id != null) {
			setLoan_Id(loan_Id);
		}

		Boolean is_Partially_Funded = (Boolean)attributes.get(
				"is_Partially_Funded");

		if (is_Partially_Funded != null) {
			setIs_Partially_Funded(is_Partially_Funded);
		}

		Double amount_Requested = (Double)attributes.get("amount_Requested");

		if (amount_Requested != null) {
			setAmount_Requested(amount_Requested);
		}

		Double amount_Fulfilled = (Double)attributes.get("amount_Fulfilled");

		if (amount_Fulfilled != null) {
			setAmount_Fulfilled(amount_Fulfilled);
		}

		Date expiry_Date = (Date)attributes.get("expiry_Date");

		if (expiry_Date != null) {
			setExpiry_Date(expiry_Date);
		}

		Date date_Requisitioned = (Date)attributes.get("date_Requisitioned");

		if (date_Requisitioned != null) {
			setDate_Requisitioned(date_Requisitioned);
		}

		Date date_Of_Fulfillment = (Date)attributes.get("date_Of_Fulfillment");

		if (date_Of_Fulfillment != null) {
			setDate_Of_Fulfillment(date_Of_Fulfillment);
		}

		Date start_Date = (Date)attributes.get("start_Date");

		if (start_Date != null) {
			setStart_Date(start_Date);
		}

		Date end_Date = (Date)attributes.get("end_Date");

		if (end_Date != null) {
			setEnd_Date(end_Date);
		}

		Long company_Id = (Long)attributes.get("company_Id");

		if (company_Id != null) {
			setCompany_Id(company_Id);
		}

		Long group_Id = (Long)attributes.get("group_Id");

		if (group_Id != null) {
			setGroup_Id(group_Id);
		}

		Integer amount_Monthly = (Integer)attributes.get("amount_Monthly");

		if (amount_Monthly != null) {
			setAmount_Monthly(amount_Monthly);
		}

		String account_Information = (String)attributes.get(
				"account_Information");

		if (account_Information != null) {
			setAccount_Information(account_Information);
		}

		Integer day_Of_Withdrawal = (Integer)attributes.get("day_Of_Withdrawal");

		if (day_Of_Withdrawal != null) {
			setDay_Of_Withdrawal(day_Of_Withdrawal);
		}

		Date final_Payment_Date = (Date)attributes.get("final_Payment_Date");

		if (final_Payment_Date != null) {
			setFinal_Payment_Date(final_Payment_Date);
		}

		String loan_Reason = (String)attributes.get("loan_Reason");

		if (loan_Reason != null) {
			setLoan_Reason(loan_Reason);
		}

		String loan_Type = (String)attributes.get("loan_Type");

		if (loan_Type != null) {
			setLoan_Type(loan_Type);
		}

		String loan_Time = (String)attributes.get("loan_Time");

		if (loan_Time != null) {
			setLoan_Time(loan_Time);
		}

		String funding_Preferences = (String)attributes.get(
				"funding_Preferences");

		if (funding_Preferences != null) {
			setFunding_Preferences(funding_Preferences);
		}

		String maturity = (String)attributes.get("maturity");

		if (maturity != null) {
			setMaturity(maturity);
		}

		Double repayments = (Double)attributes.get("repayments");

		if (repayments != null) {
			setRepayments(repayments);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String payment_Type = (String)attributes.get("payment_Type");

		if (payment_Type != null) {
			setPayment_Type(payment_Type);
		}

		String payment_Receipt = (String)attributes.get("payment_Receipt");

		if (payment_Receipt != null) {
			setPayment_Receipt(payment_Receipt);
		}
	}

	@JSON
	public long getLoan_Id() {
		return _loan_Id;
	}

	public void setLoan_Id(long loan_Id) {
		_loan_Id = loan_Id;
	}

	@JSON
	public boolean getIs_Partially_Funded() {
		return _is_Partially_Funded;
	}

	public boolean isIs_Partially_Funded() {
		return _is_Partially_Funded;
	}

	public void setIs_Partially_Funded(boolean is_Partially_Funded) {
		_is_Partially_Funded = is_Partially_Funded;
	}

	@JSON
	public double getAmount_Requested() {
		return _amount_Requested;
	}

	public void setAmount_Requested(double amount_Requested) {
		_amount_Requested = amount_Requested;
	}

	@JSON
	public double getAmount_Fulfilled() {
		return _amount_Fulfilled;
	}

	public void setAmount_Fulfilled(double amount_Fulfilled) {
		_amount_Fulfilled = amount_Fulfilled;
	}

	@JSON
	public Date getExpiry_Date() {
		return _expiry_Date;
	}

	public void setExpiry_Date(Date expiry_Date) {
		_expiry_Date = expiry_Date;
	}

	@JSON
	public Date getDate_Requisitioned() {
		return _date_Requisitioned;
	}

	public void setDate_Requisitioned(Date date_Requisitioned) {
		_date_Requisitioned = date_Requisitioned;
	}

	@JSON
	public Date getDate_Of_Fulfillment() {
		return _date_Of_Fulfillment;
	}

	public void setDate_Of_Fulfillment(Date date_Of_Fulfillment) {
		_date_Of_Fulfillment = date_Of_Fulfillment;
	}

	@JSON
	public Date getStart_Date() {
		return _start_Date;
	}

	public void setStart_Date(Date start_Date) {
		_start_Date = start_Date;
	}

	@JSON
	public Date getEnd_Date() {
		return _end_Date;
	}

	public void setEnd_Date(Date end_Date) {
		_end_Date = end_Date;
	}

	@JSON
	public long getCompany_Id() {
		return _company_Id;
	}

	public void setCompany_Id(long company_Id) {
		_company_Id = company_Id;
	}

	@JSON
	public long getGroup_Id() {
		return _group_Id;
	}

	public void setGroup_Id(long group_Id) {
		_group_Id = group_Id;
	}

	@JSON
	public int getAmount_Monthly() {
		return _amount_Monthly;
	}

	public void setAmount_Monthly(int amount_Monthly) {
		_amount_Monthly = amount_Monthly;
	}

	@JSON
	public String getAccount_Information() {
		if (_account_Information == null) {
			return StringPool.BLANK;
		}
		else {
			return _account_Information;
		}
	}

	public void setAccount_Information(String account_Information) {
		_account_Information = account_Information;
	}

	@JSON
	public int getDay_Of_Withdrawal() {
		return _day_Of_Withdrawal;
	}

	public void setDay_Of_Withdrawal(int day_Of_Withdrawal) {
		_day_Of_Withdrawal = day_Of_Withdrawal;
	}

	@JSON
	public Date getFinal_Payment_Date() {
		return _final_Payment_Date;
	}

	public void setFinal_Payment_Date(Date final_Payment_Date) {
		_final_Payment_Date = final_Payment_Date;
	}

	@JSON
	public String getLoan_Reason() {
		if (_loan_Reason == null) {
			return StringPool.BLANK;
		}
		else {
			return _loan_Reason;
		}
	}

	public void setLoan_Reason(String loan_Reason) {
		_loan_Reason = loan_Reason;
	}

	@JSON
	public String getLoan_Type() {
		if (_loan_Type == null) {
			return StringPool.BLANK;
		}
		else {
			return _loan_Type;
		}
	}

	public void setLoan_Type(String loan_Type) {
		_loan_Type = loan_Type;
	}

	@JSON
	public String getLoan_Time() {
		if (_loan_Time == null) {
			return StringPool.BLANK;
		}
		else {
			return _loan_Time;
		}
	}

	public void setLoan_Time(String loan_Time) {
		_loan_Time = loan_Time;
	}

	@JSON
	public String getFunding_Preferences() {
		if (_funding_Preferences == null) {
			return StringPool.BLANK;
		}
		else {
			return _funding_Preferences;
		}
	}

	public void setFunding_Preferences(String funding_Preferences) {
		_funding_Preferences = funding_Preferences;
	}

	@JSON
	public String getMaturity() {
		if (_maturity == null) {
			return StringPool.BLANK;
		}
		else {
			return _maturity;
		}
	}

	public void setMaturity(String maturity) {
		_maturity = maturity;
	}

	@JSON
	public double getRepayments() {
		return _repayments;
	}

	public void setRepayments(double repayments) {
		_repayments = repayments;
	}

	@JSON
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	public void setStatus(String status) {
		_status = status;
	}

	@JSON
	public String getPayment_Type() {
		if (_payment_Type == null) {
			return StringPool.BLANK;
		}
		else {
			return _payment_Type;
		}
	}

	public void setPayment_Type(String payment_Type) {
		_payment_Type = payment_Type;
	}

	@JSON
	public String getPayment_Receipt() {
		if (_payment_Receipt == null) {
			return StringPool.BLANK;
		}
		else {
			return _payment_Receipt;
		}
	}

	public void setPayment_Receipt(String payment_Receipt) {
		_payment_Receipt = payment_Receipt;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Loan.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Loan toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Loan)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		LoanImpl loanImpl = new LoanImpl();

		loanImpl.setLoan_Id(getLoan_Id());
		loanImpl.setIs_Partially_Funded(getIs_Partially_Funded());
		loanImpl.setAmount_Requested(getAmount_Requested());
		loanImpl.setAmount_Fulfilled(getAmount_Fulfilled());
		loanImpl.setExpiry_Date(getExpiry_Date());
		loanImpl.setDate_Requisitioned(getDate_Requisitioned());
		loanImpl.setDate_Of_Fulfillment(getDate_Of_Fulfillment());
		loanImpl.setStart_Date(getStart_Date());
		loanImpl.setEnd_Date(getEnd_Date());
		loanImpl.setCompany_Id(getCompany_Id());
		loanImpl.setGroup_Id(getGroup_Id());
		loanImpl.setAmount_Monthly(getAmount_Monthly());
		loanImpl.setAccount_Information(getAccount_Information());
		loanImpl.setDay_Of_Withdrawal(getDay_Of_Withdrawal());
		loanImpl.setFinal_Payment_Date(getFinal_Payment_Date());
		loanImpl.setLoan_Reason(getLoan_Reason());
		loanImpl.setLoan_Type(getLoan_Type());
		loanImpl.setLoan_Time(getLoan_Time());
		loanImpl.setFunding_Preferences(getFunding_Preferences());
		loanImpl.setMaturity(getMaturity());
		loanImpl.setRepayments(getRepayments());
		loanImpl.setStatus(getStatus());
		loanImpl.setPayment_Type(getPayment_Type());
		loanImpl.setPayment_Receipt(getPayment_Receipt());

		loanImpl.resetOriginalValues();

		return loanImpl;
	}

	public int compareTo(Loan loan) {
		int value = 0;

		if (getLoan_Id() < loan.getLoan_Id()) {
			value = -1;
		}
		else if (getLoan_Id() > loan.getLoan_Id()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Loan loan = null;

		try {
			loan = (Loan)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = loan.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Loan> toCacheModel() {
		LoanCacheModel loanCacheModel = new LoanCacheModel();

		loanCacheModel.loan_Id = getLoan_Id();

		loanCacheModel.is_Partially_Funded = getIs_Partially_Funded();

		loanCacheModel.amount_Requested = getAmount_Requested();

		loanCacheModel.amount_Fulfilled = getAmount_Fulfilled();

		Date expiry_Date = getExpiry_Date();

		if (expiry_Date != null) {
			loanCacheModel.expiry_Date = expiry_Date.getTime();
		}
		else {
			loanCacheModel.expiry_Date = Long.MIN_VALUE;
		}

		Date date_Requisitioned = getDate_Requisitioned();

		if (date_Requisitioned != null) {
			loanCacheModel.date_Requisitioned = date_Requisitioned.getTime();
		}
		else {
			loanCacheModel.date_Requisitioned = Long.MIN_VALUE;
		}

		Date date_Of_Fulfillment = getDate_Of_Fulfillment();

		if (date_Of_Fulfillment != null) {
			loanCacheModel.date_Of_Fulfillment = date_Of_Fulfillment.getTime();
		}
		else {
			loanCacheModel.date_Of_Fulfillment = Long.MIN_VALUE;
		}

		Date start_Date = getStart_Date();

		if (start_Date != null) {
			loanCacheModel.start_Date = start_Date.getTime();
		}
		else {
			loanCacheModel.start_Date = Long.MIN_VALUE;
		}

		Date end_Date = getEnd_Date();

		if (end_Date != null) {
			loanCacheModel.end_Date = end_Date.getTime();
		}
		else {
			loanCacheModel.end_Date = Long.MIN_VALUE;
		}

		loanCacheModel.company_Id = getCompany_Id();

		loanCacheModel.group_Id = getGroup_Id();

		loanCacheModel.amount_Monthly = getAmount_Monthly();

		loanCacheModel.account_Information = getAccount_Information();

		String account_Information = loanCacheModel.account_Information;

		if ((account_Information != null) &&
				(account_Information.length() == 0)) {
			loanCacheModel.account_Information = null;
		}

		loanCacheModel.day_Of_Withdrawal = getDay_Of_Withdrawal();

		Date final_Payment_Date = getFinal_Payment_Date();

		if (final_Payment_Date != null) {
			loanCacheModel.final_Payment_Date = final_Payment_Date.getTime();
		}
		else {
			loanCacheModel.final_Payment_Date = Long.MIN_VALUE;
		}

		loanCacheModel.loan_Reason = getLoan_Reason();

		String loan_Reason = loanCacheModel.loan_Reason;

		if ((loan_Reason != null) && (loan_Reason.length() == 0)) {
			loanCacheModel.loan_Reason = null;
		}

		loanCacheModel.loan_Type = getLoan_Type();

		String loan_Type = loanCacheModel.loan_Type;

		if ((loan_Type != null) && (loan_Type.length() == 0)) {
			loanCacheModel.loan_Type = null;
		}

		loanCacheModel.loan_Time = getLoan_Time();

		String loan_Time = loanCacheModel.loan_Time;

		if ((loan_Time != null) && (loan_Time.length() == 0)) {
			loanCacheModel.loan_Time = null;
		}

		loanCacheModel.funding_Preferences = getFunding_Preferences();

		String funding_Preferences = loanCacheModel.funding_Preferences;

		if ((funding_Preferences != null) &&
				(funding_Preferences.length() == 0)) {
			loanCacheModel.funding_Preferences = null;
		}

		loanCacheModel.maturity = getMaturity();

		String maturity = loanCacheModel.maturity;

		if ((maturity != null) && (maturity.length() == 0)) {
			loanCacheModel.maturity = null;
		}

		loanCacheModel.repayments = getRepayments();

		loanCacheModel.status = getStatus();

		String status = loanCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			loanCacheModel.status = null;
		}

		loanCacheModel.payment_Type = getPayment_Type();

		String payment_Type = loanCacheModel.payment_Type;

		if ((payment_Type != null) && (payment_Type.length() == 0)) {
			loanCacheModel.payment_Type = null;
		}

		loanCacheModel.payment_Receipt = getPayment_Receipt();

		String payment_Receipt = loanCacheModel.payment_Receipt;

		if ((payment_Receipt != null) && (payment_Receipt.length() == 0)) {
			loanCacheModel.payment_Receipt = null;
		}

		return loanCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(49);

		sb.append("{loan_Id=");
		sb.append(getLoan_Id());
		sb.append(", is_Partially_Funded=");
		sb.append(getIs_Partially_Funded());
		sb.append(", amount_Requested=");
		sb.append(getAmount_Requested());
		sb.append(", amount_Fulfilled=");
		sb.append(getAmount_Fulfilled());
		sb.append(", expiry_Date=");
		sb.append(getExpiry_Date());
		sb.append(", date_Requisitioned=");
		sb.append(getDate_Requisitioned());
		sb.append(", date_Of_Fulfillment=");
		sb.append(getDate_Of_Fulfillment());
		sb.append(", start_Date=");
		sb.append(getStart_Date());
		sb.append(", end_Date=");
		sb.append(getEnd_Date());
		sb.append(", company_Id=");
		sb.append(getCompany_Id());
		sb.append(", group_Id=");
		sb.append(getGroup_Id());
		sb.append(", amount_Monthly=");
		sb.append(getAmount_Monthly());
		sb.append(", account_Information=");
		sb.append(getAccount_Information());
		sb.append(", day_Of_Withdrawal=");
		sb.append(getDay_Of_Withdrawal());
		sb.append(", final_Payment_Date=");
		sb.append(getFinal_Payment_Date());
		sb.append(", loan_Reason=");
		sb.append(getLoan_Reason());
		sb.append(", loan_Type=");
		sb.append(getLoan_Type());
		sb.append(", loan_Time=");
		sb.append(getLoan_Time());
		sb.append(", funding_Preferences=");
		sb.append(getFunding_Preferences());
		sb.append(", maturity=");
		sb.append(getMaturity());
		sb.append(", repayments=");
		sb.append(getRepayments());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", payment_Type=");
		sb.append(getPayment_Type());
		sb.append(", payment_Receipt=");
		sb.append(getPayment_Receipt());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(76);

		sb.append("<model><model-name>");
		sb.append("org.GoodReturn.model.Loan");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>loan_Id</column-name><column-value><![CDATA[");
		sb.append(getLoan_Id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>is_Partially_Funded</column-name><column-value><![CDATA[");
		sb.append(getIs_Partially_Funded());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amount_Requested</column-name><column-value><![CDATA[");
		sb.append(getAmount_Requested());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amount_Fulfilled</column-name><column-value><![CDATA[");
		sb.append(getAmount_Fulfilled());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expiry_Date</column-name><column-value><![CDATA[");
		sb.append(getExpiry_Date());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>date_Requisitioned</column-name><column-value><![CDATA[");
		sb.append(getDate_Requisitioned());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>date_Of_Fulfillment</column-name><column-value><![CDATA[");
		sb.append(getDate_Of_Fulfillment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>start_Date</column-name><column-value><![CDATA[");
		sb.append(getStart_Date());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>end_Date</column-name><column-value><![CDATA[");
		sb.append(getEnd_Date());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>company_Id</column-name><column-value><![CDATA[");
		sb.append(getCompany_Id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>group_Id</column-name><column-value><![CDATA[");
		sb.append(getGroup_Id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amount_Monthly</column-name><column-value><![CDATA[");
		sb.append(getAmount_Monthly());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>account_Information</column-name><column-value><![CDATA[");
		sb.append(getAccount_Information());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>day_Of_Withdrawal</column-name><column-value><![CDATA[");
		sb.append(getDay_Of_Withdrawal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>final_Payment_Date</column-name><column-value><![CDATA[");
		sb.append(getFinal_Payment_Date());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>loan_Reason</column-name><column-value><![CDATA[");
		sb.append(getLoan_Reason());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>loan_Type</column-name><column-value><![CDATA[");
		sb.append(getLoan_Type());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>loan_Time</column-name><column-value><![CDATA[");
		sb.append(getLoan_Time());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>funding_Preferences</column-name><column-value><![CDATA[");
		sb.append(getFunding_Preferences());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maturity</column-name><column-value><![CDATA[");
		sb.append(getMaturity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>repayments</column-name><column-value><![CDATA[");
		sb.append(getRepayments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>payment_Type</column-name><column-value><![CDATA[");
		sb.append(getPayment_Type());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>payment_Receipt</column-name><column-value><![CDATA[");
		sb.append(getPayment_Receipt());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Loan.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Loan.class
		};
	private long _loan_Id;
	private boolean _is_Partially_Funded;
	private double _amount_Requested;
	private double _amount_Fulfilled;
	private Date _expiry_Date;
	private Date _date_Requisitioned;
	private Date _date_Of_Fulfillment;
	private Date _start_Date;
	private Date _end_Date;
	private long _company_Id;
	private long _group_Id;
	private int _amount_Monthly;
	private String _account_Information;
	private int _day_Of_Withdrawal;
	private Date _final_Payment_Date;
	private String _loan_Reason;
	private String _loan_Type;
	private String _loan_Time;
	private String _funding_Preferences;
	private String _maturity;
	private double _repayments;
	private String _status;
	private String _payment_Type;
	private String _payment_Receipt;
	private Loan _escapedModelProxy;
}