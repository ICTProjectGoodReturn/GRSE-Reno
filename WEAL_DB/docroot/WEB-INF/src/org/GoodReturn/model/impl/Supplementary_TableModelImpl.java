/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.GoodReturn.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.GoodReturn.model.Supplementary_Table;
import org.GoodReturn.model.Supplementary_TableModel;
import org.GoodReturn.model.Supplementary_TableSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Supplementary_Table service. Represents a row in the &quot;WEAL_Supplementary_Table&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.GoodReturn.model.Supplementary_TableModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Supplementary_TableImpl}.
 * </p>
 *
 * @author gilaa004
 * @see Supplementary_TableImpl
 * @see org.GoodReturn.model.Supplementary_Table
 * @see org.GoodReturn.model.Supplementary_TableModel
 * @generated
 */
@JSON(strict = true)
public class Supplementary_TableModelImpl extends BaseModelImpl<Supplementary_Table>
	implements Supplementary_TableModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a supplementary_ table model instance should use the {@link org.GoodReturn.model.Supplementary_Table} interface instead.
	 */
	public static final String TABLE_NAME = "WEAL_Supplementary_Table";
	public static final Object[][] TABLE_COLUMNS = {
			{ "table_Id", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table WEAL_Supplementary_Table (table_Id LONG not null primary key)";
	public static final String TABLE_SQL_DROP = "drop table WEAL_Supplementary_Table";
	public static final String ORDER_BY_JPQL = " ORDER BY supplementary_Table.table_Id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY WEAL_Supplementary_Table.table_Id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.org.GoodReturn.model.Supplementary_Table"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.org.GoodReturn.model.Supplementary_Table"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Supplementary_Table toModel(Supplementary_TableSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Supplementary_Table model = new Supplementary_TableImpl();

		model.setTable_Id(soapModel.getTable_Id());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Supplementary_Table> toModels(
		Supplementary_TableSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Supplementary_Table> models = new ArrayList<Supplementary_Table>(soapModels.length);

		for (Supplementary_TableSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.org.GoodReturn.model.Supplementary_Table"));

	public Supplementary_TableModelImpl() {
	}

	public long getPrimaryKey() {
		return _table_Id;
	}

	public void setPrimaryKey(long primaryKey) {
		setTable_Id(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_table_Id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Supplementary_Table.class;
	}

	public String getModelClassName() {
		return Supplementary_Table.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("table_Id", getTable_Id());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long table_Id = (Long)attributes.get("table_Id");

		if (table_Id != null) {
			setTable_Id(table_Id);
		}
	}

	@JSON
	public long getTable_Id() {
		return _table_Id;
	}

	public void setTable_Id(long table_Id) {
		_table_Id = table_Id;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Supplementary_Table.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Supplementary_Table toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Supplementary_Table)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		Supplementary_TableImpl supplementary_TableImpl = new Supplementary_TableImpl();

		supplementary_TableImpl.setTable_Id(getTable_Id());

		supplementary_TableImpl.resetOriginalValues();

		return supplementary_TableImpl;
	}

	public int compareTo(Supplementary_Table supplementary_Table) {
		int value = 0;

		if (getTable_Id() < supplementary_Table.getTable_Id()) {
			value = -1;
		}
		else if (getTable_Id() > supplementary_Table.getTable_Id()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Supplementary_Table supplementary_Table = null;

		try {
			supplementary_Table = (Supplementary_Table)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = supplementary_Table.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Supplementary_Table> toCacheModel() {
		Supplementary_TableCacheModel supplementary_TableCacheModel = new Supplementary_TableCacheModel();

		supplementary_TableCacheModel.table_Id = getTable_Id();

		return supplementary_TableCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(3);

		sb.append("{table_Id=");
		sb.append(getTable_Id());

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(7);

		sb.append("<model><model-name>");
		sb.append("org.GoodReturn.model.Supplementary_Table");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>table_Id</column-name><column-value><![CDATA[");
		sb.append(getTable_Id());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Supplementary_Table.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Supplementary_Table.class
		};
	private long _table_Id;
	private Supplementary_Table _escapedModelProxy;
}